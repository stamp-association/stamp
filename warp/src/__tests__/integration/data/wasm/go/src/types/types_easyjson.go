// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes(in *jlexer.Lexer, out *TransferAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target":
			out.Target = string(in.String())
		case "qty":
			out.Qty = uint64(in.Uint64())
		case "function":
			out.Function = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes(out *jwriter.Writer, in TransferAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix[1:])
		out.String(string(in.Target))
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Qty))
	}
	{
		const prefix string = ",\"function\":"
		out.RawString(prefix)
		out.String(string(in.Function))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransferAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransferAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransferAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransferAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes(l, v)
}
func easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes1(in *jlexer.Lexer, out *PstState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ticker":
			out.Ticker = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "owner":
			out.Owner = string(in.String())
		case "evolve":
			out.Evolve = string(in.String())
		case "canEvolve":
			out.CanEvolve = bool(in.Bool())
		case "balances":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Balances = make(map[string]uint64)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 uint64
					v1 = uint64(in.Uint64())
					(out.Balances)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes1(out *jwriter.Writer, in PstState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ticker\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ticker))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"owner\":"
		out.RawString(prefix)
		out.String(string(in.Owner))
	}
	{
		const prefix string = ",\"evolve\":"
		out.RawString(prefix)
		out.String(string(in.Evolve))
	}
	{
		const prefix string = ",\"canEvolve\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanEvolve))
	}
	{
		const prefix string = ",\"balances\":"
		out.RawString(prefix)
		if in.Balances == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Balances {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				out.Uint64(uint64(v2Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PstState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PstState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PstState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PstState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes1(l, v)
}
func easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes2(in *jlexer.Lexer, out *ForeignCallAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contractTxId":
			out.ContractTxId = string(in.String())
		case "function":
			out.Function = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes2(out *jwriter.Writer, in ForeignCallAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contractTxId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ContractTxId))
	}
	{
		const prefix string = ",\"function\":"
		out.RawString(prefix)
		out.String(string(in.Function))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ForeignCallAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ForeignCallAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ForeignCallAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ForeignCallAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes2(l, v)
}
func easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes3(in *jlexer.Lexer, out *EvolveAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "function":
			out.Function = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes3(out *jwriter.Writer, in EvolveAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"function\":"
		out.RawString(prefix)
		out.String(string(in.Function))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EvolveAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EvolveAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EvolveAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EvolveAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes3(l, v)
}
func easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes4(in *jlexer.Lexer, out *BalanceResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "balance":
			out.Balance = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes4(out *jwriter.Writer, in BalanceResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Balance))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes4(l, v)
}
func easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes5(in *jlexer.Lexer, out *BalanceAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target":
			out.Target = string(in.String())
		case "function":
			out.Function = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes5(out *jwriter.Writer, in BalanceAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"target\":"
		out.RawString(prefix[1:])
		out.String(string(in.Target))
	}
	{
		const prefix string = ",\"function\":"
		out.RawString(prefix)
		out.String(string(in.Function))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalanceAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalanceAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalanceAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalanceAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComRedstoneFinanceRedstoneContractsWasmGoSrcTypes5(l, v)
}
